import com.google.gson.Gson;
import objects.Rule;
import objects.Server;
import objects.Vulnerability;

import java.io.*;
import java.util.*;
import java.net.*;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;

public class VulnerabilityDetector {

  // todo:extract to ini file
  private static final String serversApi = "http://interview.vulcancyber.com:3000/servers";
  private static final String authHeader = "Aa123456!";
  private static final String vulnsApi = "http://interview.vulcancyber.com:3000/vulns";
  private static final int vulsPageSize = 100;
  private static final String rulesCsvFileName = "http://interview.vulcancyber.com:3000/rules.csv";
  private static final String solutionDir = "C:\\temp\\solution\\";

  private Gson gson = new Gson();

  public VulnerabilityDetector() {}

  public void detect() {
    Server[] servers = null;
    Rule[] rules = null;
    Vulnerability[] vulnerabilities = null;
    Map<String, Set<Server>> serversByOs = new HashMap<>();

    try {
      servers = gson.fromJson(getServersJson(serversApi, authHeader), Server[].class);
      serversByOs = buildServersOsMap(servers, serversByOs);
      rules = readCsv();
    boolean paging = true;
      int page = 1;
      while (paging) {
        vulnerabilities =
            gson.fromJson(getVulsJson(vulnsApi, page, vulsPageSize), Vulnerability[].class);

        detectByVuls(servers , rules, vulnerabilities, serversByOs);


        if (vulnerabilities.length < vulsPageSize) paging = false;
      }

    } catch (Exception e) {
      // todo: handle errors
      e.printStackTrace();
    }
  }

  private Map<String, Set<Server>> buildServersOsMap(Server[] servers, Map<String, Set<Server>> serversByOs) {

    for (Server server :servers ) {
      String osKey = server.getOs() + "_" +server.getOsVersion();
      Set<Server> serverSet = serversByOs.getOrDefault(osKey, new HashSet<Server>());
      serverSet.add(server);
      serversByOs.putIfAbsent(osKey ,serverSet);
    }
    return serversByOs;
  }

  private void detectByVuls(Server[] servers, Rule[] rules, Vulnerability[] vulnerabilities, Map<String, Set<Server>> serversByOs) {

    for (Vulnerability vul  : vulnerabilities ) {
        if (vul.getAffects() != null){
          Set<Server> relevatServers = serversByOs.get(vul.getAffects());
          if (validateServersVuls(vul,rules,relevatServers)){
            System.out.println("Found a suspected Server:" + vul);
          }
        }
    }



  }

  private boolean validateServersVuls(Vulnerability vul, Rule[] rules, Set<Server> relevatServers) {
    //todo: validate by rules

    return false;
  }

  private Rule[] readCsv() throws FileNotFoundException {
    ArrayList<Rule> rules = new ArrayList<>();
    Scanner sc = new Scanner(new File(solutionDir + "rules.csv"));

    if (sc.hasNextLine()) sc.next() ; //ignore headerLine
    while (sc.hasNextLine()) // returns a boolean value
    {
      String[] line = sc.nextLine().split(",");
      Rule rule = new Rule();

    }
    sc.close();  //closes the scanner


    return new Rule[0];
  }

  private String getVulsJson(String vulnsApi, int page, int amount) throws IOException {
    HttpURLConnection urlConn;
    URL mUrl = new URL(vulnsApi);
    urlConn = (HttpURLConnection) mUrl.openConnection();
    urlConn.addRequestProperty("Content-Type", "application/" + "POST");
    String query = "{\"startId\": " + page + ", \"amount\": " + amount + "}";
    urlConn.setRequestProperty("Content-Length", Integer.toString(query.length()));
    urlConn.setDoOutput(true);
    urlConn.getOutputStream().write(query.getBytes("UTF8"));
    BufferedReader br = null;
    StringBuilder resp = new StringBuilder();
    if (urlConn.getResponseCode() == 200) {
      br = new BufferedReader(new InputStreamReader(urlConn.getInputStream()));
      String strCurrentLine;
      while ((strCurrentLine = br.readLine()) != null) {
        resp.append(strCurrentLine);
      }
    } else { // todo:handle error
      throw new RuntimeException("cant get vuls ");
    }
    return resp.toString();
  }

  private String getServersJson(String serversApi, String authHeader)
      throws URISyntaxException, IOException, InterruptedException {
    HttpClient httpClient = HttpClient.newHttpClient();
    HttpRequest request =
        HttpRequest.newBuilder()
            .header("Authorization", authHeader)
            .uri(new URI(serversApi))
            .build();

    return httpClient.send(request, HttpResponse.BodyHandlers.ofString()).body();
  }

  public static void main(String[] args) {
    VulnerabilityDetector vulnerabilityDetector = new VulnerabilityDetector();
    vulnerabilityDetector.detect();
  }
}
